package testbench.issues.issue17419;

// Generated by Java* Fuzzer test generator and Artemis program mutator.
public class TestHarness {

  public static final int N = 256;

  public static long instanceCount = 8551384551172924536L;

  public static float fFld = -28.532F;

  public static long lFld = 7864L;

  public double dFld = 2.45669;

  public static volatile boolean bFld = true;

  public short sFld = 17630;

  public int iFld = 4;

  public static float[][] fArrFld = new float[N][N];

  public static long[] lArrFld = new long[N];

  public static int[] iArrFld = new int[N];

  public long[][] lArrFld1 = new long[N][N];

  public boolean[][] bArrFld = new boolean[N][N];

  static {
    FuzzerUtils.init(TestHarness.fArrFld, 64.620F);
    FuzzerUtils.init(TestHarness.lArrFld, 2508629833L);
    FuzzerUtils.init(TestHarness.iArrFld, 10801);
  }

  public static long vMeth_check_sum = 0;

  public static long vMeth1_check_sum = 0;

  public static long vMeth2_check_sum = 0;

  public static void vMeth2(int i7, long l, int i8) {
    float f1 = -108.679F;
    int i9 = 17547, i10 = 51094, i11 = 62845, i12 = -173, i13 = 12, i14 = 49143, i15 = 42030, i16 = 12, i17 = 16704,
        i18 = -4, iArr[][] = new int[N][N];
    short s = 9950;
    double d1 = 61.26936;
    boolean b = false;
    FuzzerUtils.init(iArr, -48167);
    for (f1 = 5; f1 < 93; f1++) {
      for (i10 = 1; i10 < 6; ++i10) {
        TestHarness.fFld *= i9;
        for (i12 = i10; i12 < 2; i12++) {
          i13 *= (int) TestHarness.instanceCount;
          s = (short) i9;
          TestHarness.instanceCount = (long) d1;
          TestHarness.instanceCount += l;
          TestHarness.instanceCount >>= i13;
          iArr[(int) (f1 - 1)][i12] -= (int) TestHarness.instanceCount;
        }
        i8 = -211;
        i14 = 1;
        while (++i14 < 2) {
          if (i8 != 0) {
            vMeth2_check_sum += i7 + l + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + s
                + Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(iArr);
            return;
          }
          i13 -= i9;
        }
        TestHarness.fFld = l;
        for (i15 = 1; i15 < 2; ++i15) {
          iArr[i10 + 1][i10 + 1] += i14;
          i9 = i14;
          i7 -= (int) d1;
          d1 -= i9;
          switch ((int) (((f1 % 1) * 5) + 1)) {
            case 2:
              if (i12 != 0) {
                vMeth2_check_sum += i7 + l + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + s
                    + Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18
                    + FuzzerUtils.checkSum(iArr);
                return;
              }
              i16 += i13;
              i11 |= (int) TestHarness.instanceCount;
              s += (short) (i15 * i15);
              i16 = (int) f1;
              break;
          }
        }
        i8 += (((i10 * i7) + TestHarness.fFld) - i12);
        TestHarness.fFld = i11;
        b = b;
      }
      {
        java.io.PrintStream ax$5 = System.out;
        java.io.PrintStream ax$6 = System.err;
        java.io.PrintStream ax$7 = new java.io.PrintStream(new java.io.OutputStream() {

          @Override
          public void write(int b) throws java.io.IOException {
            // DO NOTHING: DISCARD ALL OUTPUTS
          }
        });
        System.setOut(ax$7);
        System.setErr(ax$7);
        try {
          for (int ax$3 = -4761; ax$3 < 4225; ax$3 += 1) {
            int ax$0 = i9;
            boolean ax$1 = b;
            try {
              if (i9 != 3) {
                b = true;
              }
            } catch (Throwable ax$2) {
            } finally {
              i9 = ax$0;
              b = ax$1;
            }
          }
        } catch (Throwable ax$4) {
        }
        System.setOut(ax$5);
        System.setErr(ax$6);
      }
      if (b) {
        iArr[(int) (f1 + 1)][(int) (f1 + 1)] = (int) TestHarness.instanceCount;
        TestHarness.instanceCount ^= 89L;
      } else if (b) {
        TestHarness.lArrFld[(int) (f1)] -= i9;
      } else {
        i16 *= (int) l;
        for (i17 = 1; i17 < 6; i17++) {
          if (b)
            break;
        }
        i18 = (int) TestHarness.instanceCount;
      }
    }
    vMeth2_check_sum += i7 + l + i8 + Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + i13 + s
        + Double.doubleToLongBits(d1) + i14 + i15 + i16 + (b ? 1 : 0) + i17 + i18 + FuzzerUtils.checkSum(iArr);
  }

  public static void vMeth1(float f, int i5, int i6) {
    double d2 = 111.8960, d3 = -79.31975, dArr1[] = new double[N];
    int i20 = -179, i21 = 144, i22 = 33051, i24 = -30359;
    short s1 = 25610;
    FuzzerUtils.init(dArr1, 15.96725);
    vMeth2(i6, TestHarness.instanceCount, i5);
    TestHarness.instanceCount -= -2162989091L;
    TestHarness.instanceCount = 198;
    f = 2;
    TestHarness.iArrFld[(8 >>> 1) % N] *= i5;
    TestHarness.instanceCount |= i5;
    for (int i19 : TestHarness.iArrFld) {
      byte by = -36;
      TestHarness.fArrFld[(i19 >>> 1) % N][(i19 >>> 1) % N] += (float) d2;
      i6 -= i5;
      by = (byte) i19;
      by = (byte) TestHarness.lFld;
      TestHarness.instanceCount = i19;
      i6 = by;
      TestHarness.iArrFld[(i5 >>> 1) % N] = i19;
      i5 <<= i19;
      i20 = 1;
      do {
        i6 -= (int) 10L;
        for (i21 = i20; i21 < 1; ++i21) {
          int i23 = -68;
          s1 += (short) (117 + (i21 * i21));
          i5 += i21;
          i19 >>= i5;
          i23 = (int) 10L;
          f = by;
          i23 += i21;
          dArr1[i20 - 1] *= i5;
        }
        d2 *= f;
        i22 = by;
        i5 *= (int) TestHarness.instanceCount;
        TestHarness.lArrFld[i20 + 1] += i21;
        switch ((i20 % 5) + 46) {
          case 46:
            TestHarness.lFld >>= i22;
          case 47:
            for (d3 = i20; d3 < 1; d3++) {
              f = i5;
              i5 -= (int) -27L;
              TestHarness.iArrFld = TestHarness.iArrFld;
              i19 -= (int) TestHarness.instanceCount;
            }
            i19 += (i20 + TestHarness.fFld);
            break;
          case 48:
            i22 = -11;
            break;
          case 49:
            TestHarness.fFld += TestHarness.fFld;
            break;
          case 50:
            i24 = (int) TestHarness.instanceCount;
            break;
        }
      } while (++i20 < 2);
    }
    vMeth1_check_sum += Float.floatToIntBits(f) + i5 + i6 + Double.doubleToLongBits(d2) + i20 + i21 + i22 + s1
        + Double.doubleToLongBits(d3) + i24 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
  }

  public void vMeth(int i4) {
    int i26 = -57376, i27 = 5, i28 = -34215, i29 = -5;
    byte by1 = -46;
    short s2 = 3954, s3 = -2590;
    vMeth1(TestHarness.fFld, i4, 38246);
    TestHarness.lFld = -3;
    i4 = i4;
    TestHarness.lArrFld = TestHarness.lArrFld;
    TestHarness.fFld -= -205L;
    for (int i25 : TestHarness.iArrFld) {
      TestHarness.lFld = i4;
      TestHarness.instanceCount = (long) dFld;
      TestHarness.lFld = i4;
      for (i26 = 1; i26 < 2; i26++) {
        for (i28 = i26; i28 < 2; i28++) {
          i4 *= i4;
          TestHarness.instanceCount += i28;
          switch ((i28 % 9) + 73) {
            case 73:
              dFld = TestHarness.instanceCount;
              if (TestHarness.bFld)
                continue;
              i29 -= (int) TestHarness.lFld;
              if (i26 != 0) {
                vMeth_check_sum += i4 + i26 + i27 + i28 + i29 + by1 + s2 + s3;
                return;
              }
              if (TestHarness.bFld)
                break;
              TestHarness.instanceCount += i28;
              i29 += (i28 - i28);
              i29 += i25;
              TestHarness.iArrFld[i28] >>= i27;
              TestHarness.iArrFld[i26 - 1] *= -18613;
              i4 += (i28 | i28);
              TestHarness.instanceCount += (i28 | i26);
              if (true)
                break;
              i4 = (int) TestHarness.lFld;
              i27 += i28;
              break;
            case 74:
              i4 = 59795;
              if (i27 != 0) {
                vMeth_check_sum += i4 + i26 + i27 + i28 + i29 + by1 + s2 + s3;
                return;
              }
              by1 += (byte) TestHarness.fFld;
              TestHarness.lFld += TestHarness.lFld;
              break;
            case 75:
              s2 -= (short) i26;
              TestHarness.iArrFld[i28 - 1] = i25;
              break;
            case 76:
              s3 = (short) i29;
              i29 ^= i29;
              break;
            case 77:
              TestHarness.lFld += i4;
              break;
            case 78:
              i29 ^= i26;
              break;
            case 79:
              i25 *= (int) TestHarness.instanceCount;
            case 80:
              TestHarness.fFld *= i26;
            case 81:
              i29 -= (int) dFld;
              break;
          }
        }
      }
    }
    vMeth_check_sum += i4 + i26 + i27 + i28 + i29 + by1 + s2 + s3;
  }

  public void mainTest(String[] strArr1) {
    int i = -15472, i1 = -136, i2 = 182, i30 = 64, i31 = 14, iArr1[] = new int[N];
    double d = 86.112519, dArr[] = new double[N];
    long l1 = -5811041892113352023L;
    byte by2 = 80;
    short[] sArr = new short[N];
    FuzzerUtils.init(dArr, -1.104160);
    FuzzerUtils.init(sArr, (short) -7259);
    FuzzerUtils.init(iArr1, -22372);
    for (i = 14; i < 239; i++) {
      i2 = 1;
      while (++i2 < 23) {
        int i3 = 0;
        d -= ((--TestHarness.instanceCount) + Float.intBitsToFloat(++i1));
        i1 <<= i3;
        TestHarness.instanceCount = (long) (dArr[i - 1] *= (TestHarness.fArrFld[i - 1][i2 - 1]++));
        vMeth(i);
        l1 = TestHarness.lFld;
        for (i30 = 1; i < i30; i30 -= 2) {
          if (false) {
            sFld += (short) (((i30 * i30) + i3) - i1);
            TestHarness.instanceCount -= (long) TestHarness.fFld;
            lArrFld1 = lArrFld1;
            TestHarness.instanceCount = TestHarness.lFld;
            switch ((i % 8) + 79) {
              case 79:
                d = iFld;
                TestHarness.fFld += TestHarness.lFld;
                i3 = (int) d;
                if (true)
                  continue;
                break;
              case 80:
              case 81:
                iFld += (i30 - iFld);
                if (TestHarness.bFld)
                  break;
                sFld *= (short) TestHarness.fFld;
                TestHarness.fFld += TestHarness.fFld;
                i1 >>= i;
                switch ((((i3 >>> 1) % 7) * 5) + 79) {
                  case 112:
                    i1 += (i30 * i30);
                    bArrFld[i30 + 1] = bArrFld[i];
                    break;
                  case 84:
                    TestHarness.iArrFld = TestHarness.iArrFld;
                    if (TestHarness.bFld)
                      continue;
                    switch ((i30 % 5) + 10) {
                      case 10:
                        i31 -= (int) TestHarness.lFld;
                        i31 >>= i30;
                        i31 += (i30 ^ (long) TestHarness.fFld);
                        i1 = i;
                        if (TestHarness.bFld) {
                          TestHarness.lFld += i30;
                          dArr[i2 + 1] = TestHarness.instanceCount;
                          i3 = i2;
                          lArrFld1[i2 - 1][i] *= i2;
                          sFld = (short) i2;
                          i31 = (int) 1.976F;
                          i1 = i1;
                          TestHarness.iArrFld[i2] = i1;
                          i1 = i1;
                          TestHarness.iArrFld[i2 - 1] *= i30;
                        }
                        TestHarness.iArrFld[i2 + 1] += (int) l1;
                        i1 *= i1;
                        i3 += (14 + (i30 * i30));
                        l1 -= TestHarness.lFld;
                        iFld += 38366;
                        break;
                      case 11:
                        l1 += i30;
                        iFld += 127;
                        if (TestHarness.bFld)
                          continue;
                        dFld += i31;
                        switch ((((i31 >>> 1) % 10) * 5) + 75) {
                          case 104:
                            TestHarness.lFld <<= sFld;
                            TestHarness.fFld += (((i30 * i) + i30) - l1);
                            if (true)
                              continue;
                            iFld = by2;
                            i1 = (int) l1;
                          case 116:
                            l1 += (-3432201346L + (i30 * i30));
                            TestHarness.bFld = TestHarness.bFld;
                            iFld -= i30;
                            iFld = iFld;
                            l1 = i3;
                            i31 += (i30 * i30);
                            i31 *= (int) TestHarness.fFld;
                            TestHarness.iArrFld[i2 + 1] += i3;
                            break;
                          case 95:
                            l1 = TestHarness.instanceCount;
                            sArr[i30 + 1] = (short) -20592;
                            if (TestHarness.bFld)
                              continue;
                            i3 = iFld;
                            break;
                          case 109:
                            TestHarness.fFld -= i;
                            iArr1[i2 - 1] |= (int) l1;
                            i31 -= i2;
                            TestHarness.instanceCount = i1;
                            break;
                          case 80:
                            TestHarness.fArrFld[i + 1][i30 - 1] = i;
                            break;
                          case 93:
                            i3 += (((i30 * i3) + i) - i31);
                            break;
                          case 89:
                            i3 += 86;
                            break;
                          case 76:
                            TestHarness.iArrFld[i2] += (int) l1;
                            break;
                          case 101:
                            iArr1[i] = (int) TestHarness.instanceCount;
                            break;
                          case 92:
                            if (true)
                              break;
                            break;
                          default:
                            TestHarness.iArrFld[i30] = i1;
                        }
                      case 12:
                        i1 = i31;
                      case 13:
                        iArr1[i30 - 1] = iFld;
                      case 14:
                        TestHarness.fArrFld[i2 - 1][i2 - 1] -= (float) d;
                    }
                  case 102:
                    iFld *= (int) TestHarness.fFld;
                    break;
                  case 90:
                    i1 = i3;
                    break;
                  case 99:
                    dArr[i - 1] *= sFld;
                    break;
                  case 81:
                    TestHarness.lFld += (((i30 * i31) + i2) - TestHarness.fFld);
                    break;
                  case 89:
                    iArr1[i2 + 1] = iFld;
                }
                break;
              case 82:
                lArrFld1[i - 1][i30] += TestHarness.lFld;
                break;
              case 83:
                sFld += (short) i30;
              case 84:
                i3 -= i;
              case 85:
                TestHarness.fFld = 2226;
                break;
              case 86:
                i31 = (int) l1;
                break;
              default:
                TestHarness.bFld = TestHarness.bFld;
            }
          }
        }
      }
    }
    FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
    FuzzerUtils.out.println("d l1 i30 = " + Double.doubleToLongBits(d) + "," + l1 + "," + i30);
    FuzzerUtils.out
        .println("i31 by2 dArr = " + i31 + "," + by2 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
    FuzzerUtils.out.println("sArr iArr1 = " + FuzzerUtils.checkSum(sArr) + "," + FuzzerUtils.checkSum(iArr1));
    FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.lFld = " + TestHarness.instanceCount + ","
        + Float.floatToIntBits(TestHarness.fFld) + "," + TestHarness.lFld);
    FuzzerUtils.out
        .println("dFld Test.bFld sFld = " + Double.doubleToLongBits(dFld) + "," + (TestHarness.bFld ? 1 : 0) + "," + sFld);
    FuzzerUtils.out.println("iFld Test.fArrFld Test.lArrFld = " + iFld + ","
        + Double.doubleToLongBits(FuzzerUtils.checkSum(TestHarness.fArrFld)) + "," + FuzzerUtils.checkSum(TestHarness.lArrFld));
    FuzzerUtils.out.println("Test.iArrFld lArrFld1 bArrFld = " + FuzzerUtils.checkSum(TestHarness.iArrFld) + ","
        + FuzzerUtils.checkSum(lArrFld1) + "," + FuzzerUtils.checkSum(bArrFld));
    FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
    FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
    FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
  }

  public static void main(String[] strArr) {
    if (ax$8) {
      try {
        long ax$135 = 0x23456789ABCDEF01L;
        long ax$134 = 0x111111117FFFFFFFL;
        if (ax$134 != ax$135)
          ;
      } catch (Throwable ax$136) {
      } finally {
      }
      return;
    }
    try {
      TestHarness _instance = new TestHarness();
      for (int i = 0; i < 10; i++) {
        _instance.mainTest(strArr);
      }
    } catch (Exception ex) {
      FuzzerUtils.out.println(ex.getClass().getCanonicalName());
    }
  }

  private static Boolean ax$8 = false;
}
// /////////////////////////////////////////////////////////////////////
// DEBUG Test -> Test
// DEBUG main -> main
// DEBUG mainTest -> mainTest
// DEBUG vMeth -> vMeth mainTest
// DEBUG vMeth1 -> vMeth1 vMeth mainTest
// DEBUG vMeth2 -> vMeth2 vMeth1 vMeth mainTest
// DEBUG Depth = 3
// DEBUG Classes = 1
// DEBUG static objects = {}
